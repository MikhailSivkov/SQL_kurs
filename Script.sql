-- База данных представляет собой, спарсенные (питоном) данные с площадки torgi.gov о торгах планируемых\объявленных\законченных.
-- Также с общедоступных ресурсов (например https://www.irn.ru) берутся средние цены на квариры в Москве и подмосковье. 
-- С помощь указанных данных можно провести анализ, какова скидка по уже прошедшим торгам по квартирам.
-- Также можно по объявленным торгам можно спрогнозировать цену. Выбрать наиболее выгодные лоты. 
-- Данная БД имеет сугубо практическое применение, и нужна для осуществления моего небольшого проекта.


DROP DATABASE IF EXISTS b_mashine;
CREATE DATABASE b_mashine;
USE b_mashine; 

DROP TABLE IF EXISTS id_govru;
CREATE TABLE id_gov (
	id SERIAL, 
    id_gov VARCHAR(50), -- COMMENT 'ID с сайта torgi.gov для обновления инфы по торгам ',
    gov_internet_link VARCHAR(200), -- COMMENT 'Ссылка на торги'),  
	INDEX idgovru(id, id_gov));

   
-- lotid,lotname,lotdescrip,biddtype,priceMin,priceFin,findata,ploshad,category,createDate,lotlink
   
DROP TABLE IF EXISTS `spisok`;
CREATE TABLE `spisok` (
	spisok_id SERIAL NOT NULL AUTO_INCREMENT,
    regions int(2),
    address varchar(200),
	lotname varchar(100), -- описание лота
	date_torgi date, -- дата объявления торгов
	priceMin int(10), -- минимальная цена
	priceFin int(10), -- цена по которой торги состоялись
	FinData date, -- дата когда торги состоялись
    created_at DATETIME DEFAULT NOW(),
    hometown VARCHAR(100),
	INDEX spisok_index (spisok_id, regions)
	# FOREIGN KEY (region_id) REFERENCES regions
	);


DROP TABLE IF EXISTS `regions`;
CREATE TABLE `regions` (
	region_id SERIAL,
	region_name varchar(100)
    );
   
INSERT INTO regions VALUES
(01, 'Республика Адыгея (Адыгея)'),
(02, 'Республика Башкортостан'),
(03, 'Республика Бурятия'),
(04, 'Республика Алтай'),
(05, 'Республика Дагестан'),
(06, 'Республика Ингушетия'),
(07, 'Кабардино-Балкарская Республика'),
(08, 'Республика Калмыкия'),
(09, 'Карачаево-Черкесская Республика'),
(10, 'Республика Карелия'),
(11, 'Республика Коми'),
(12, 'Республика Марий Эл'),
(13, 'Республика Мордовия'),
(14, 'Республика Саха (Якутия)'),
(15, 'Республика Северная Осетия - Алания'),
(16, 'Республика Татарстан (Татарстан)'),
(17, 'Республика Тыва'),
(18, 'Удмуртская Республика'),
(19, 'Республика Хакасия'),
(20, 'Чеченская Республика'),
(21, 'Чувашская Республика - Чувашия'),
(22, 'Алтайский край'),
(23, 'Краснодарский край'),
(24, 'Красноярский край'),
(25, 'Приморский край'),
(26, 'Ставропольский край'),
(27, 'Хабаровский край'),
(28, 'Амурская область'),
(29, 'Архангельская область'),
(30, 'Астраханская область'),
(31, 'Белгородская область'),
(32, 'Брянская область'),
(33, 'Владимирская область'),
(34, 'Волгоградская область'),
(35, 'Вологодская область'),
(36, 'Воронежская область'),
(37, 'Ивановская область'),
(38, 'Иркутская область'),
(39, 'Калининградская область'),
(40, 'Калужская область'),
(41, 'Камчатский край'),
(42, 'Кемеровская область'),
(43, 'Кировская область'),
(44, 'Костромская область'),
(45, 'Курганская область'),
(46, 'Курская область'),
(47, 'Ленинградская область'),
(48, 'Липецкая область'),
(49, 'Магаданская область'),
(50, 'Московская область'),
(51, 'Мурманская область'),
(52, 'Нижегородская область'),
(53, 'Новгородская область'),
(54, 'Новосибирская область'),
(55, 'Омская область'),
(56, 'Оренбургская область'),
(57, 'Орловская область'),
(58, 'Пензенская область'),
(59, 'Пермский край'),
(60, 'Псковская область'),
(61, 'Ростовская область'),
(62, 'Рязанская область'),
(63, 'Самарская область'),
(64, 'Саратовская область'),
(65, 'Сахалинская область'),
(66, 'Свердловская область'),
(67, 'Смоленская область'),
(68, 'Тамбовская область'),
(69, 'Тверская область'),
(70, 'Томская область'),
(71, 'Тульская область'),
(72, 'Тюменская область'),
(73, 'Ульяновская область'),
(74, 'Челябинская область'),
(75, 'Забайкальский край'),
(76, 'Ярославская область'),
(77, 'г. Москва'),
(78, 'Санкт-Петербург'),
(79, 'Еврейская автономная область'),
(83, 'Ненецкий автономный округ'),
(86, 'Ханты-Мансийский автономный округ - Югра'),
(87, 'Чукотский автономный округ'),
(89, 'Ямало-Ненецкий автономный округ'),
(99, 'Иные территории, включая город и космодром Байконур')
;

DROP TABLE IF EXISTS `avrg_prise_MO`;
CREATE TABLE `avrg_prise_MO` (
	id_mo SERIAL,
	district_name varchar(200),
	avrg_prise bigint,
	month_prise DATE DEFAULT (CURRENT_DATE) 
    );
   
INSERT INTO avrg_prise_MO(id_mo, district_name, avrg_prise) VALUES
(01, 'Реутов', 195639),
(02, 'Долгопрудный', 186901),
(03, 'Красногорск', 186866),
(04, 'Одинцово, Трехгорка', 184788),
(05, 'Химки, Сходня', 179590),
(06, 'Люберцы', 169764),
(07, 'Мытищи', 168133),
(08, 'Котельники, Дзержинский', 165105),
(09, 'Видное', 160432),
(10, 'Королев', 152498),
(11, 'Апрелевка, Краснознамеск', 151959),
(12, 'Дедовск, Нахабино, Павловская Слобода', 151789),
(13, 'Лобня', 151254),
(14, 'Балашиха', 149930),
(15, 'Подольск', 149700),
(16, 'Истра', 148364),
(17, 'Железнодорожный', 146901),
(18, 'Домодедово', 144282),
(19, 'Пушкино, Правдиский', 141162),
(20, 'Климовск, Львовский', 138696),
(21, 'Жуковский', 138088),
(22, 'Дубна', 136353),
(23, 'Раменское', 135605),
(24, 'Малаховка, Красково, Томилино, Удельная', 134341),
(25, 'Селятино, Калининец, Голицино, Большие Вяземы', 133687),
(26, 'Ивантеевка', 131386),
(27, 'Лыткарино', 131240),
(28, 'Звенигород', 122563),
(29, 'Щелково', 120635),
(30, 'Наро-Фоминск', 119356),
(31, 'Чехов', 119292),
(32, 'Сергиев Посад, Софрино', 118048),
(33, 'Фрязино', 116321),
(34, 'Дмитров, Яхрома', 115739),
(35, 'Солнечногорск', 115369),
(36, 'Ступино', 114629),
(37, 'Лосино-Петровский, Свердловский, Монино', 106737),
(38, 'Клин', 100870),
(39, 'Коломна', 99705),
(40, 'Бронинницы, Белозерский', 97598),
(41, 'Электросталь, Электроугли', 97118),
(42, 'Ногинск, Черноголовка', 97085),
(43, 'Серпухов', 94686),
(44, 'Можайск, Руза, Тучково', 93887),
(45, 'Орехово-Зуео, Павловский Посад', 88940),
(46, 'Воскресенск', 83642),
(47, 'Михнево', 81564),
(48, 'Егорьевск, Куровское', 75706),
(49, 'Волоколамск', 71606),
(50, 'Шатура, Рошаль', 66887),
(51, 'Кашира, Ожерелье', 59809)
;

DROP TABLE IF EXISTS `crude_info`;
CREATE TABLE `crude_info` (
	id_info SERIAL,
	lotid varchar(100),
	lotname varchar(5000),
	lotdescrip varchar(1000),
	bidtype varchar(500),
	priceMin bigint,
	priceFin bigint,
	square bigint,
	findata DATE,
	category varchar(500),
	createDate DATE,
	lotlink varchar(500)
	);
#я потом импортировал данные из файла csv инструментами DBeaver
# пытался другими методами, но не получилось
/* INSERT `crude_info`
FROM 'C:\\torgii_big.csv'
WITH (
FIELDTERMINATOR = ';' OR ' ' or '  ' or '        ',
ROWTERMINATOR = '\n')
GO; */


 /* SELECT * FROM OPENROWSET
   (
    'Microsoft.ACE.OLEDB.12.0',
    'Excel 12.0;
     Database=C:\Users\Михаил\Desktop\Учеба GB\3. MySQL\kursovik\МО_Ср.цены_июль_22.xlsx',
    'SELECT * FROM [Лист1$]'
   ); */

#Выборка квартир для продажи или проданных

SELECT * FROM crude_info ci 
WHERE 
(biddtype = 'Реализация имущества должников' OR
 'Продажа (приватизация) государственного и муниципального имущества');

# выборка квартир из Московской области выставленнные на торги
SELECT * FROM crude_info ci 
WHERE (lotname OR lotdescrip LIKE '50:%') AND 
(biddtype = 'Реализация имущества должников' OR
 'Продажа (приватизация) государственного и муниципального имущества')
AND priceFin IS null;

# средняя стоимость, площадь, стоимость 1 кв.м. проданных на торгах квартир в МО
SELECT avg(priceFin) AS 'средняя цена квартиры', 
		avg(s) AS 'средняя площадь квартиры',
		round(avg(priceFin)/avg(s),2) AS 'средняя стоимость выставленных на торги за 1 кв.м.'
FROM crude_info ci 
WHERE (lotname OR lotdescrip LIKE '50:%') AND 
(biddtype = 'Реализация имущества должников' OR
 'Продажа (приватизация) государственного и муниципального имущества')
# средняя рыночная стоимость квартир в МО за 1 кв.м.
SELECT round(avg(avrg_prise),2) AS 'рыночная стоимость за 1 кв.м.'
FROM avrg_prise_MO 


# краткое представление квартир из Карелии 

CREATE or REPLACE VIEW Karelia (lotname_k , priceMin_k , priceFin_k)
AS SELECT lotname , priceMin , priceFin 
FROM crude_info ci 
WHERE (lotname OR lotdescrip LIKE '10:__:_______:%') ;
#10:03:0010114:222
SELECT * FROM Karelia;

# выборка республик
CREATE or REPLACE VIEW Respublics (region_name_r)
AS SELECT region_name
FROM regions r 
WHERE (region_name LIKE '%еспубл%');

SELECT * FROM Respublics;


# функция по подсчету кол-ва торгов выборке
DROP FUNCTION kov_torg;
DELIMITER //
CREATE FUNCTION kov_torg()
RETURNS INT DETERMINISTIC
BEGIN 
	DECLARE result INT;
	SELECT count(*) INTO RESULT FROM crude_info ci;
	RETURN result;
END//
DELIMITER ;
SELECT kov_torg();

#процедура выдающая торги с датами торгов которые наступят позже текущего момента  
DROP PROCEDURE torg_data;
DELIMITER //
CREATE PROCEDURE torg_data()
SELECT lotname, priceMin, lotlink FROM crude_info
WHERE  (findata) > now();
//
DELIMITER ;
call torg_data;

# триггер который перед вставкой новой информации проверяет, есть ли информация по этим торгам 
# уже в списке (через лот ID), и если есть то обновляет столбец priceFin, но что то не выходит-ошибку выдает.

CREATE TRIGGER audit_id
BEFORE UPDATE ON crude_info
FOR EACH ROW 
BEGIN
	UPDATE crude_info SET priceFin = COALESCE (NEW.priceFin, OLD.priceFin)
	WHERE (NEW.lotid = OLD.lotid AND priceFin is NULL);
END;


INSERT INTO spisok (lotname, priceMin, priceFin, FinData, lotid, created_at, lotlink, s)
 SELECT lotname, priceMin, priceFin, FinData, lotid, createDate, lotlink, s  
 FROM crude_info 
 WHERE crude_info.biddtype = 'Реализация имущества должников' ;
 
 #OR  'Продажа (приватизация) государственного и муниципального имущества');



